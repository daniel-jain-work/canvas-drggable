function useTraceUpdate(props: any) {
  const prev = useRef(props);
  useEffect(() => {
    const changedProps = Object.entries(props).reduce((ps: any, [k, v]) => {
      if (prev.current[k] !== v) {
        ps[k] = [prev.current[k], v];
      }
      return ps;
    }, {});
    if (Object.keys(changedProps).length > 0) {
      console.log("Changed props:", changedProps);
    }
    prev.current = props;
  });
}

class ColoredRect extends React.Component {
  state = {
    color: "green",
  };
  handleClick = () => {
    this.setState({
      color: Konva.Util.getRandomColor(),
    });
  };
  render() {
    return (
      <Rect
        x={500}
        y={500}
        width={50}
        height={50}
        fill={this.state.color}
        shadowBlur={5}
        onClick={this.handleClick}
      />
    );
  }
}

const LionImage = () => {
  const [image] = useImage(
    "https://storage.googleapis.com/moss-canvas.appspot.com/kOQqT1Q3JjtLiJyCfRmO/YyOZzGrmQ325bjraPzzP"
    // "https://konvajs.org/assets/lion.png"
  );
  // const image = new window.Image();
  // image.src = "https://konvajs.org/assets/lion.png";
  return <Image image={image} />;
};

// const [stars, setStars] = useState(INITIAL_STATE);

// function generateShapes() {
//   return [...Array(10)].map((_, i) => ({
//     id: i.toString(),
//     x: Math.random() * window.innerWidth,
//     y: Math.random() * window.innerHeight,
//     rotation: Math.random() * 180,
//     isDragging: false,
//   }));
// }
// const INITIAL_STATE = generateShapes();

// // ref={(node) => {
// //   this.imageNode = node;
// // }}
// const loadImage = () => {
//   // save to "this" to remove "load" handler on unmount
//   image.src = props.src;
//   // image.addEventListener("load", handleLoad);
// };

// const handleLoad = () => {
//   // after setState react-konva will update canvas and redraw the layer
//   // because "image" property is changed
//   this.setState({
//     image: this.image,
//   });
//   // if you keep same image object during source updates
//   // you will have to update layer manually:
//   // this.imageNode.getLayer().batchDraw();
// };

// // custom component that will handle loading image from url
// // you may add more logic here to handle "loading" state
// // or if loading is failed
// // VERY IMPORTANT NOTES:
// // at first we will set image state to null
// // and then we will set it to native image instance when it is loaded
// class URLImage extends React.Component {
//   state = {
//     image: null,
//   };
//   componentDidMount() {
//     this.loadImage();
//   }
//   componentDidUpdate(oldProps) {
//     if (oldProps.src !== this.props.src) {
//       this.loadImage();
//     }
//   }
//   componentWillUnmount() {
//     this.image.removeEventListener("load", this.handleLoad);
//   }
//   loadImage() {
//     // save to "this" to remove "load" handler on unmount
//     this.image = new window.Image();
//     this.image.src = this.props.src;
//     this.image.addEventListener("load", this.handleLoad);
//   }
//   handleLoad = () => {
//     // after setState react-konva will update canvas and redraw the layer
//     // because "image" property is changed
//     this.setState({
//       image: this.image,
//     });
//     // if you keep same image object during source updates
//     // you will have to update layer manually:
//     // this.imageNode.getLayer().batchDraw();
//   };
//   render() {
//     return (
//       <Image
//         x={this.props.x}
//         y={this.props.y}
//         image={this.state.image}
//         ref={(node) => {
//           this.imageNode = node;
//         }}
//       />
//     );
//   }
// }

// return (
//   <FileDrop onDrop={onDrop}>
//     <Stage width={window.innerWidth} height={window.innerHeight}>
//       <Layer>
//         <Text text="Try click on rect" />
//         <ColoredRect />
//       </Layer>
//     </Stage>
//   </FileDrop>
// );

// return <div></div>;

// <FileDrop
//   onFrameDragEnter={(event) => console.log("onFrameDragEnter", event)}
//   onFrameDragLeave={(event) => console.log("onFrameDragLeave", event)}
//   onFrameDrop={(event) => console.log("onFrameDrop", event)}
//   onDragOver={(event) => console.log("onDragOver", event)}
//   onDragLeave={(event) => console.log("onDragLeave", event)}
//   onDrop={(files, event) => console.log("onDrop!", files, event)}
// >

// <Stage width={window.innerWidth} height={window.innerHeight}>

// const handleDragStart = (e: any) => {
//   const id = e.target.id();
//   setStars(
//     stars.map((star) => {
//       return {
//         ...star,
//         isDragging: star.id === id,
//       };
//     })
//   );
// };
// const handleDragEnd = (e: any) => {
//   setStars(
//     stars.map((star) => {
//       return {
//         ...star,
//         isDragging: false,
//       };
//     })
//   );
// };

// return (
//   <FileDrop onDrop={onDrop}>
//     <Stage width={window.innerWidth} height={window.innerHeight}>
//       <Layer>
//         <Text text="Try to drag a star" />
//         {stars.map((star) => (
//           <Star
//             key={star.id}
//             id={star.id}
//             x={star.x}
//             y={star.y}
//             numPoints={5}
//             innerRadius={20}
//             outerRadius={40}
//             fill="#89b717"
//             opacity={0.8}
//             draggable
//             rotation={star.rotation}
//             shadowColor="black"
//             shadowBlur={10}
//             shadowOpacity={0.6}
//             shadowOffsetX={star.isDragging ? 10 : 5}
//             shadowOffsetY={star.isDragging ? 10 : 5}
//             scaleX={star.isDragging ? 1.2 : 1}
//             scaleY={star.isDragging ? 1.2 : 1}
//             onDragStart={handleDragStart}
//             onDragEnd={handleDragEnd}
//           />
//         ))}
//       </Layer>
//     </Stage>
//   </FileDrop>
// );
